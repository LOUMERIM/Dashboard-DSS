# streamlit run c:/Users/Alunos/Downloads/dash/teste3.py

import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
import plotly.graph_objects as go
import pickle
import requests
import io

# Configura√ß√£o de p√°gina para usar todo o espa√ßo dispon√≠vel
st.set_page_config(layout="wide")

# Carregando os DataFrames
df_raw = pd.read_csv('https://github.com/LOUMERIM/Dashboard-DSS/raw/refs/heads/main/df_raw.csv')
df_processed = pd.read_csv('https://github.com/LOUMERIM/Dashboard-DSS/raw/refs/heads/main/DB-SaudeMental-Tech_processed.csv')
df_mapa = pd.read_csv('https://github.com/LOUMERIM/Dashboard-DSS/raw/refs/heads/main/Geodados/df_raw_mapa.csv')
df_raw_pt = pd.read_csv('https://github.com/LOUMERIM/Dashboard-DSS/raw/refs/heads/main/df_raw_traduzido.csv')

# Personaliza√ß√£o de formata√ß√£o, barra lateral e dos bot√µes
st.markdown(
    """
    <style>
        /* Cor de fundo do dashboard */
        .stApp {
            background-color: #082338;  /* Cor de fundo do dashboard: azul escuro */
        }

        /* Removendo padding e espa√ßamentos padr√£o */
        .main .block-container {
            padding-top: 2rem;
            padding-bottom: 2rem;
            padding-left: 3rem;
            padding-right: 3rem;
        }

        /* Expande os gr√°ficos para usar todo o espa√ßo dispon√≠vel*/
        /*.stChart, .stDataFrame { */
        /*    width: 100% !important; */
        /* } */

        /* Estilos para os gr√°ficos Plotly */
        [data-testid="stPlotlyChart"] {
            border-radius: 15px;
            overflow: hidden;
        }

        /* Personaliza√ß√£o da barra lateral */
        section[data-testid="stSidebar"] {
            background-color: #0e1117; /* Cor de fundo da aba lateral: preto */
            width: 260px !important;   /* Alterar de acordo com a largura desejada */
        }

        /* Personaliza√ß√£o dos bot√µes */
        div.stButton > button {
            width: 100%;
            height: 60px;
            background-color: #4CAF50; /* Cor de fundo do bot√£o: verde */
            border-radius: 12px;       /* Bordas arredondadas */
            border: none;              /* Remove a borda ao passar o mouse*/
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2); /* Sombra */
        }
        div.stButton > button:hover {
            background-color: #45a049; /* Cor de fundo ao passar o mouse: verde escuro*/
        }
        div.stButton > button > div > p {
            font-size: 20px;    /* Tamanho da fonte do texto */
            color: white;       /* Cor do texto */
            font-weight: bold;  /* Texto em negrito */
        }

        /* Estilo para os gr√°ficos Plotly */
        [data-testid="stPlotlyChart"] {
            border-radius: 15px; /* Bordas arredondadas */
            overflow: hidden;    /* Esconde o conte√∫do que ultrapassa os limites do gr√°fico */
        }
    </style>
    """,
    unsafe_allow_html=True,
)

# Sidebar com t√≠tulo
with st.sidebar:
    st.sidebar.markdown("<h1 style='font-size:24px;"
                               "font-weight: bold;"
                               "text-align: center;"
                               "color: white;'"
                    ">Selecione a P√°gina</h1>", unsafe_allow_html=True)

    # Bot√µes para mudar de p√°gina
    if st.button('üìä An√°lise Descritiva', use_container_width=True):
        st.session_state.pagina = 'P√°gina 1'
    if st.button('üí° Insights', use_container_width=True):
        st.session_state.pagina = 'P√°gina 2'
    if st.button('üìù Question√°rio', use_container_width=True):
        st.session_state.pagina = 'P√°gina 3'

# Inicializa estado da p√°gina
if 'pagina' not in st.session_state:
    st.session_state.pagina = 'P√°gina 1'

# Conte√∫do principal expans√≠vel
st.markdown("<h1 style='font-size: 44px;'>Impactos do Trabalho Excessivo na Sa√∫de de Empregados em TI</h1>", unsafe_allow_html=True)
    
if st.session_state.pagina == 'P√°gina 1': ##############################################################
    st.subheader("An√°lise Descritiva do Dataset")

    # Calcular o dist√∫rbio mais comum
    coluna_disturbios = "Em caso afirmativo, com qual(is) condi√ß√£o(√µes) voc√™ foi diagnosticado?"
    disturbio_mais_comum = df_raw[coluna_disturbios].value_counts().idxmax()

    # Calcular o total de perguntas (colunas no dataset)
    total_perguntas = df_raw.shape[1]

    # Calcular o total de respondentes (linhas no dataset)
    total_respondentes = df_raw.shape[0]

    # Calcular a quantidade de dist√∫rbios mentais √∫nicos
    quantidade_disturbios = df_raw[coluna_disturbios].nunique()

    with st.container():
        st.markdown("### üìä Resumo Descritivo")
        
        # Primeira linha com 3 colunas
        col1, col2, col3 = st.columns(3)
        col1.metric(label="üîπ Total de dados", value=total_respondentes)
        col2.metric(label="üîπ Total de perguntas", value=total_perguntas)
        col3.metric(label="üîπ Quantidade de dist√∫rbios mentais", value=quantidade_disturbios)
        
        # Segunda linha com 1 coluna ocupando todo o espa√ßo
        col4 = st.container()
        with col4:
            st.metric(label="üîπ Dist√∫rbio mais comum", value=disturbio_mais_comum)


        # Divis√£o de espa√ßo para gr√°ficos adicionais
        col1, col2 = st.columns(2, gap='small')
        
        with col1:
            df_graf_2 = df_processed[['Back-end Developer', 'Front-end Developer', 'Supervisor/Team Lead', 'Executive Leadership',
                                    'Dev Evangelist/Advocate', 'DevOps/SysAdmin', 'Support', 'Designer', 'One-person shop', 'Sales', 'HR']]
            
            df_graf_2 = df_graf_2.sum().reset_index()
            df_graf_2.columns = ['Cargo', 'Quantidade']

            # Dicion√°rio com os nomes antigos e os novos nomes desejados
            rename_dict = {'Back-end Developer': 'Back-end',
                        'Front-end Developer': 'Front-end',
                        'Supervisor/Team Lead': 'L√≠der de Equipe',
                        'Executive Leadership': 'Lideran√ßa Executiva',
                        'Dev Evangelist/Advocate': 'Advogado Dev',
                        'DevOps/SysAdmin': 'DevOps',
                        'Support': 'Suporte',
                        'Designer': 'Designer',
                        'One-person shop': 'Aut√¥nomo',
                        'Sales': 'Vendas',
                            'HR': 'Recursos Humanos'}

            df_graf_2['Cargo'] = df_graf_2['Cargo'].replace(rename_dict)

            # Criar o gr√°fico de barras
            fig2 = px.bar(df_graf_2, x='Cargo', y='Quantidade',
                        labels={'Cargo': 'Cargo', 'Quantidade': 'Quantidade'},
                        color_discrete_sequence=['#4CAF50'])

            fig2.update_layout(
                    title={
                        'text': 'Distribui√ß√£o de Cargos',
                        'font': {'size': 24, 'color': 'white'},
                        'x': 0.03,  # Pequena margem da esquerda
                        'xanchor': 'left'
                    },

                    paper_bgcolor='#0d2e4d',  # Cor de fundo ao redor do gr√°fico
                    plot_bgcolor='rgba(0,0,0,0)',  # Fundo transparente
                    font=dict(color='white'),      # Texto em branco para contraste
                    xaxis=dict(showgrid=False),
                    yaxis=dict(showgrid=True, gridcolor='rgba(255,255,255,0.1)'),
                    margin=dict(l=50, r=50, t=80, b=50),  # Ajuste equilibrado das margens

                    width=900, # Largura do gr√°fico

                    hoverlabel=dict(font_size=16)

            )

            fig2.update_traces(
                hovertemplate=(
                    "<b>%{label}</b><br>"  # Nome do cargo em negrito
                    "Quantidade: %{customdata}"  # Valor espec√≠fico
                ),
                customdata=df_graf_2['Quantidade']  # Dados para exibir
            )

            # Exibir o gr√°fico
            st.plotly_chart(fig2, use_container_width=False)



        with col2:
            df_graf_1 = df_raw["Qual √© o seu g√™nero?"].value_counts().reset_index()
            df_graf_1.columns = ["G√™nero", "Quantidade"]
            
            # Criar um gr√°fico de pizza
            fig1 = px.pie(df_graf_1, values='Quantidade', names='G√™nero',
                        color_discrete_sequence=['#4CAF50', '#c44d4d', '#2196F3']) # Cores personalizadas

            fig1.update_layout(
                    title={
                        'text': 'Distribui√ß√£o de G√™nero',
                        'font': {'size': 24, 'color': 'white'},
                        'x': 0.03,  # Pequena margem da esquerda
                        'xanchor': 'left'
                    },

                    paper_bgcolor='#0d2e4d',  # Cor de fundo ao redor do gr√°fico
                    plot_bgcolor='rgba(0,0,0,0)',  # Fundo transparente
                    font=dict(color='white'),      # Texto em branco para contraste
                    xaxis=dict(showgrid=False),
                    yaxis=dict(showgrid=True, gridcolor='rgba(255,255,255,0.1)'),
                    margin=dict(l=50, r=50, t=80, b=10),  # Ajuste equilibrado das margens

                    width=500, # Largura do gr√°fico
                    legend_title='G√™neros', # T√≠tulo da legenda

                    hoverlabel=dict(font_color='white', font_size=16)
                )

            fig1.update_traces(
                textfont=dict(size=16, family='Arial, bold', color='white'),  # Ajusta o tamanho e cor do texto
                textposition='inside',  # Mant√©m os n√∫meros dentro das fatias
                texttemplate='%{percent:.0%}',  # Formata para arredondar
                hovertemplate="<b>%{label}</b><br>Quantidade: %{value}"  # Texto ao dar hover
                )
            
            # Exibir o gr√°fico
            st.plotly_chart(fig1, use_container_width=False)

        # Adicionar o mapa ao dashboard
        with st.container():
            st.markdown("### üåç Distribui√ß√£o Geogr√°fica dos Dados")
            
            # Criando um DataFrame com pa√≠ses e valores
            df_graf_3 = df_mapa['What country do you work in?'].value_counts().reset_index()
            df_graf_3.columns = ['Pa√≠s', 'Quantidade']
            df_graf_3 = df_graf_3[df_graf_3['Quantidade'] >= 9]

            # Definir os pontos de quebra e criar escala de cores personalizada
            thresholds = [9, 14, 20, 30, 45, 55, 70, 180, 850]
            cores = [
                '#e0f2e9',   # Verde √°gua claro
                '#c8e4d5',   # Verde pastel
                '#a3d9c2',   # Verde menta suave
                '#7accaf',   # Verde m√©dio-claro
                '#4fb89b',   # Verde jade
                '#2a9d8f',   # Verde tropical
                '#1a7f6e',   # Verde floresta claro
                '#0d5b4c',   # Verde petr√≥leo
                '#083c32'    # Verde floresta escuro
            ]

            # Calcular posi√ß√µes normalizadas (0 a 1) baseadas nos thresholds
            min_val = df_graf_3['Quantidade'].min()
            max_val = df_graf_3['Quantidade'].max()
            posicoes = [(t - min_val) / (max_val - min_val) for t in thresholds]

            # Construir a escala de cores personalizada
            escala_personalizada = []
            for i in range(len(thresholds)):
                escala_personalizada.append([posicoes[i], cores[i]])

            # Adicionar o √∫ltimo segmento at√© o valor m√°ximo
            escala_personalizada.append([1.0, cores[-1]])

            # Criando o gr√°fico de mapa-m√∫ndi
            fig3 = px.choropleth(
                df_graf_3,
                locations="Pa√≠s",
                locationmode="country names",  # Indica que estamos usando nomes de pa√≠ses
                color="Quantidade",
                color_continuous_scale=escala_personalizada,
                range_color=[min_val, max_val],  # For√ßa a escala de 9 a 851
            )

            # Aplicar customiza√ß√µes de layout
            fig3.update_layout(
            title={
                    'text': 'Dados Coletados por Pa√≠s',
                    'font': {'size': 24, 'color': 'white'},
                    'x': 0.5,  # Centraliza o t√≠tulo horizontalmente
                    'y': 0.95,  # Ajusta a posi√ß√£o vertical do t√≠tulo para cima
                    'xanchor': 'center',  # Alinha o t√≠tulo ao centro
                    'yanchor': 'top'  # Alinha o t√≠tulo ao topo
            },

            paper_bgcolor='#0d2e4d',       # Fundo escuro ao redor do mapa ###################################################
            font=dict(color='white'),      # Texto branco
            margin=dict(l=55, r=50, t=50, b=0), ###############################################################################
            height=600, ##################################################
            width=800, ####################################################
            coloraxis_showscale=False,  # Remove a barra de cores

            hoverlabel=dict(bgcolor='white',
                            font_size=15)
            )

            fig3.update_traces(
                hovertemplate=(
                    "<b>%{location}</b><br>"  # Nome do pa√≠s em negrito
                    "Quantidade = %{customdata}"  # Valor espec√≠fico
                ),
                customdata=df_graf_3['Quantidade']  # Dados extras para exibir
            )

            # Ajustar a proje√ß√£o e limites para esconder a Ant√°rtica
            fig3.update_geos(

                projection=dict(rotation=dict(lon=1, lat=1, roll=0.1)),

                lataxis_range=[-58, 86],  # Limita a latitude entre -55¬∞ e 90¬∞
                visible=False,  # Remove linhas de grade e fundo
                showcountries=False,  # Removem as fronteiras dos pa√≠ses
                showocean=True,  # Adiciona cor ao oceano para melhor contraste
                oceancolor='lightblue'
            )

            # Exibir o gr√°fico
            st.plotly_chart(fig3, use_container_width=True)
if st.session_state.pagina == 'P√°gina 2': ##############################################################
    st.subheader("An√°lise Estat√≠stica do Dataset")

        # Percentual de trabalhadores com problemas de sa√∫de mental
    mental_health_issues = df_processed["Voc√™ atualmente tem um dist√∫rbio de sa√∫de mental?"].value_counts(normalize=True) * 100
    mental_health_issues.index = mental_health_issues.index.map({2: 'Sim', 1: 'N√£o sabe', -1: 'N√£o'})
    fig1 = px.pie(values=mental_health_issues, names=mental_health_issues.index, title='Percentual de trabalhadores com problemas de sa√∫de mental')

        # Contar o n√∫mero total de respostas √† pergunta
    total_respostas = df_processed['Voc√™ acha que discutir um transtorno de sa√∫de mental com seu empregador teria consequ√™ncias negativas?'].count()

    # Contar as respostas:
    # 2 => indica que h√° consequ√™ncias negativas
    # -1 => indica que n√£o h√° consequ√™ncias
    respostas_negativas = df_processed[
        df_processed['Voc√™ acha que discutir um transtorno de sa√∫de mental com seu empregador teria consequ√™ncias negativas?'] == 2
    ].shape[0]
    respostas_positivas = df_processed[
        df_processed['Voc√™ acha que discutir um transtorno de sa√∫de mental com seu empregador teria consequ√™ncias negativas?'] == -1
    ].shape[0]

    # Percentuais
    percentual_negativo = (respostas_negativas / total_respostas) * 100
    percentual_positivo = (respostas_positivas / total_respostas) * 100
    percentual_total = total_respostas*100

    # Filtramos os respondentes que indicaram consequ√™ncias negativas:
    df_neg = df_processed[
        df_processed['Voc√™ acha que discutir um transtorno de sa√∫de mental com seu empregador teria consequ√™ncias negativas?'] == 2]
    df_sem= df_processed[
        df_processed['Voc√™ acha que discutir um transtorno de sa√∫de mental com seu empregador teria consequ√™ncias negativas?'] == -1]
    # Contar quantos, dentre os que t√™m consequ√™ncias negativas, possuem problemas mentais
    count_com_problemas = df_neg[df_neg['Voc√™ atualmente tem um dist√∫rbio de sa√∫de mental?'] == 2].shape[0]
    count_sem_problemas = df_neg[df_neg['Voc√™ atualmente tem um dist√∫rbio de sa√∫de mental?'] != 2].shape[0]

    count_com_problemas_sem = df_sem[df_sem['Voc√™ atualmente tem um dist√∫rbio de sa√∫de mental?'] == -1].shape[0]
    count_sem_problemas_sem = df_sem[df_sem['Voc√™ atualmente tem um dist√∫rbio de sa√∫de mental?'] != -1].shape[0]

    # Calcula os totais para cada categoria
    total_consequencias_negativas = count_com_problemas + count_sem_problemas
    total_sem_consequencias = count_com_problemas_sem + count_sem_problemas_sem

    # Calcula os percentuais para cada barra em rela√ß√£o ao total de cada categoria
    # Calcula os totais gerais
    total_respostas = df_processed.shape[0]

    # Calcula os percentuais em rela√ß√£o ao total geral
    percent_com_problemas_neg = (count_com_problemas / total_respostas) * 100 if total_respostas > 0 else 0
    percent_sem_problemas_neg = (count_sem_problemas / total_respostas) * 100 if total_respostas > 0 else 0

    percent_com_problemas_sem = (count_com_problemas_sem / total_respostas) * 100 if total_respostas > 0 else 0
    percent_sem_problemas_sem = (count_sem_problemas_sem / total_respostas) * 100 if total_respostas > 0 else 0

    # --- Passo 3: Criar gr√°fico de barras empilhadas com Plotly ---

    # Atualiza o gr√°fico para usar percentuais e exibir valores aproximados
    fig2 = go.Figure()

    # Adiciona barra empilhada para "Consequ√™ncias Negativas"
    fig2.add_trace(
        go.Bar(
            name='Com Problemas Mentais',
            x=['Consequ√™ncias Negativas'],
            y=[percent_com_problemas_neg],
            marker_color='indianred',
            text=[round(percent_com_problemas_neg)],  # Adiciona o valor arredondado
            texttemplate='%{text}%',  # Formato do texto
            textposition='auto'  # Exibe o texto diretamente na barra
        )
    )
    fig2.add_trace(
        go.Bar(
            name='Sem Problemas Mentais',
            x=['Consequ√™ncias Negativas'],
            y=[percent_sem_problemas_neg],
            marker_color='lightsalmon',
            text=[round(percent_sem_problemas_neg)],  # Adiciona o valor arredondado
            texttemplate='%{text}%',  # Formato do texto
            textposition='auto'  # Exibe o texto diretamente na barra
        )
    )

    # Adiciona barra para "Sem consequ√™ncias"
    fig2.add_trace(
        go.Bar(
            name='Com Problemas Mentais',
            x=['Sem Consequ√™ncias'],
            y=[percent_com_problemas_sem],
            marker_color='green',
            text=[round(percent_com_problemas_sem)],  # Adiciona o valor arredondado
            texttemplate='%{text}%',  # Formato do texto
            textposition='auto'  # Exibe o texto diretamente na barra
        )
    )
    fig2.add_trace(
        go.Bar(
            name='Sem Problemas Mentais',
            x=['Sem Consequ√™ncias'],
            y=[percent_sem_problemas_sem],
            marker_color='limegreen',
            text=[round(percent_sem_problemas_sem)],  # Adiciona o valor arredondado
            texttemplate='%{text}%',  # Formato do texto
            textposition='auto'  # Exibe o texto diretamente na barra
        )
    )

    # Configura o layout do gr√°fico
    fig2.update_layout(
        barmode='stack',
        title='Percentual que discute problemas mentais com o empregador acarretando consequ√™ncias negativas.',
        xaxis_title='Categoria',
        yaxis_title='Percentual de Respondentes (%)',
        legend_title='Detalhamento',
        yaxis=dict(tickmode='linear', tick0=0, dtick=10, range=[0, 50])  # Garante que o eixo Y v√° de 0 a 100
    )

    # Exibir os gr√°ficos lado a lado
    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(fig1, use_container_width=True)
    with col2:
        st.plotly_chart(fig2, use_container_width=True)

        # Nome da coluna que cont√©m a resposta √† pergunta
    coluna_saude_mental = "Voc√™ conhece as op√ß√µes de sa√∫de mental dispon√≠veis sob a cobertura de sa√∫de do seu empregador?"

    # Garantir que a coluna existe no dataset
    if coluna_saude_mental in df_raw.columns:
        df_raw['conhecimento_saude_mental'] = df_raw[coluna_saude_mental].map({'Sim': 2, 'N√£o': -1})

    # Criar um agrupamento por empresa, setor ou outra vari√°vel relevante
    df_agrupado = df_raw.groupby("Quantos funcion√°rios sua empresa ou organiza√ß√£o tem?")['conhecimento_saude_mental'].mean().reset_index()
    df_agrupado.rename(columns={'conhecimento_saude_mental': 'percentual_conhecimento'}, inplace=True)

    # Multiplicar por 100 para converter em porcentagem
    df_agrupado['percentual_conhecimento'] *= 100

    # --- Exibir no Streamlit ---
    st.title("Dashboard: Conhecimento das Op√ß√µes de Sa√∫de Mental")

    # Criar o gr√°fico de barras laterais
    st.plotly_chart(px.bar(df_agrupado, 
                        x='percentual_conhecimento', 
                        y='Quantos funcion√°rios sua empresa ou organiza√ß√£o tem?', 
                        orientation='h',
                        labels={'Quantos funcion√°rios sua empresa ou organiza√ß√£o tem?': 'Tamanho da Empresa', 
                                'percentual_conhecimento': 'Percentual de Conhecimento (%)'},
                        title='Distribui√ß√£o do Percentual de Funcion√°rios que Conhecem as Op√ß√µes de Sa√∫de Mental por Tamanho da Empresa'),
                    use_container_width=True)
    
    # Criar o dataset com base nos dados principais
    coluna_cargo = "Qual das op√ß√µes a seguir melhor descreve sua posi√ß√£o de trabalho?"
    coluna_disturbio = "Em caso afirmativo, com qual(is) condi√ß√£o(√µes) voc√™ foi diagnosticado?"
    coluna_tamanho_empresa = "Quantos funcion√°rios sua empresa ou organiza√ß√£o tem?"

    # Filtrar apenas os respondentes que possuem alguma doen√ßa mental
    df_mental_health = df_raw[df_raw[coluna_disturbio].notna()]

    # Dividir os cargos que est√£o separados por "/" ou "|"
    df_mental_health = df_mental_health.assign(
        Cargos_Separados=df_mental_health[coluna_cargo].str.split(r'[\/|]')
    ).explode('Cargos_Separados')

    # Remover espa√ßos extras nos cargos
    df_mental_health['Cargos_Separados'] = df_mental_health['Cargos_Separados'].str.strip()

    # Agrupar por cargo
    df_cargos = df_mental_health.groupby('Cargos_Separados').agg(
        Quantidade_Com_Doenca_Mental=(coluna_disturbio, 'count'),  # Contar respondentes com doen√ßa mental
        Doenca_Mais_Comum=(coluna_disturbio, lambda x: x.value_counts().idxmax() if not x.empty else "Desconhecido"),  # Doen√ßa mais comum
        Tamanho_Empresa=(coluna_tamanho_empresa, lambda x: x.mode()[0] if not x.mode().empty else "Desconhecido")  # Tamanho mais comum
    ).reset_index()

    # Renomear as colunas para exibi√ß√£o
    df_cargos.rename(columns={
        'Cargos_Separados': "Tipo de Cargo",
        "Quantidade_Com_Doenca_Mental": "Quantidade com Doen√ßa Mental",
        "Doenca_Mais_Comum": "Doen√ßa Mental Mais Comum",
        "Tamanho_Empresa": "Tamanho da Empresa"
    }, inplace=True)

    # Exibir o dataset no Streamlit
    st.write("### Dataset de Cargos e Sa√∫de Mental")
    st.dataframe(df_cargos)

if st.session_state.pagina == 'P√°gina 3': ##############################################################
    st.title('Question√°rio de Sa√∫de Mental')
    st.write('exemplo de texto')

    # Separando todas as valores 
    verificar_unicos = ['Voc√™ j√° teve um dist√∫rbio de sa√∫de mental no passado?',
                        'Voc√™ j√° procurou tratamento para um problema de sa√∫de mental de um profissional de sa√∫de mental?',
                        'Voc√™ foi diagnosticado com uma condi√ß√£o de sa√∫de mental por um profissional m√©dico?',
                        'Voc√™ tem hist√≥rico familiar de doen√ßa mental?',
                        'Se voc√™ tem um problema de sa√∫de mental, sente que isso interfere no seu trabalho ao ser tratado de forma eficaz?',
                        'Voc√™ acha que discutir um dist√∫rbio de sa√∫de mental com empregadores anteriores teria consequ√™ncias negativas?',
                        'Voc√™ conhece as op√ß√µes de sa√∫de mental dispon√≠veis sob a cobertura de sa√∫de do seu empregador?',
                        'Voc√™ observou ou experimentou uma resposta sem apoio ou mal tratada a um problema de sa√∫de mental em seu local de trabalho atual ou anterior?',
                        'Voc√™ ouviu falar ou observou consequ√™ncias negativas para colegas de trabalho com problemas de sa√∫de mental em seus locais de trabalho anteriores?',
                        'Suas observa√ß√µes de como outro indiv√≠duo que discutiu um transtorno de sa√∫de mental o tornaram menos propenso a revelar um problema de sa√∫de mental em seu local de trabalho atual?',
                        'Voc√™ levantaria um problema de sa√∫de mental com um empregador em potencial em uma entrevista?',
                        'Voc√™ sentiu que seus empregadores anteriores levavam a sa√∫de mental t√£o a s√©rio quanto a sa√∫de f√≠sica?',
                        'Seus empregadores anteriores forneceram benef√≠cios de sa√∫de mental?',
                        'Voc√™ conhecia as op√ß√µes de cuidados de sa√∫de mental fornecidas por seus empregadores anteriores?',
                        'Voc√™ estaria disposto a discutir um problema de sa√∫de mental com seu(s) supervisor(es) direto(s)?',
                        'Qu√£o disposto voc√™ estaria a compartilhar com amigos e familiares que tem uma doen√ßa mental?',
                        'Voc√™ j√° ouviu falar ou observou consequ√™ncias negativas para colegas de trabalho que foram abertos sobre problemas de sa√∫de mental em seu local de trabalho?',
                        'Voc√™ acha que os membros da equipe/colegas de trabalho o veriam de forma mais negativa se soubessem que voc√™ sofre de um problema de sa√∫de mental?',
                        'Se um problema de sa√∫de mental o levou a solicitar uma licen√ßa m√©dica do trabalho, pedir essa licen√ßa seria:']

    perguntas_alternativas = {}
    for col in verificar_unicos:
        perguntas_alternativas[col] = df_raw[col].unique().tolist()

    # Mapeamento para parafrasear as perguntas e alternativas do formul√°rio
    parafrasear_questoes = {
        # QUEST√ÉO 1
        'Voc√™ j√° teve um dist√∫rbio de sa√∫de mental no passado?': {
            'pergunta': 'Voc√™ j√° experimentou algum dist√∫rbio de sa√∫de mental anteriormente?',
            'alternativas': {
                'Talvez': 'Talvez, eu n√£o me lembro'
            }
        },
        # QUEST√ÉO 2
        'Voc√™ j√° procurou tratamento para um problema de sa√∫de mental de um profissional de sa√∫de mental?': {
            'pergunta': 'Voc√™ j√° buscou ajuda profissional para tratar algum problema de sa√∫de mental?',
            'alternativas': {
                1: 'Sim',
                0: 'N√£o',
            }
        },
        # QUEST√ÉO 3
        'Voc√™ foi diagnosticado com uma condi√ß√£o de sa√∫de mental por um profissional m√©dico?': {
            'pergunta': 'Voc√™ j√° foi diagnosticado por um m√©dico profissional com alguma condi√ß√£o de sa√∫de mental?'
        },
        # QUEST√ÉO 4
        'Voc√™ tem hist√≥rico familiar de doen√ßa mental?': {
            'pergunta': 'H√° casos de doen√ßas mentais na sua fam√≠lia?'
        },
        # QUEST√ÉO 5
        'Se voc√™ tem um problema de sa√∫de mental, sente que isso interfere no seu trabalho ao ser tratado de forma eficaz?': {
            'pergunta': 'Se voc√™ tiver um problema de sa√∫de mental, com que frequ√™ncia o tratamento adequado iria interferir no seu desempenho no trabalho?',
            'alternativas': {
                'N√£o se aplica a mim': 'N√£o tenho problemas de sa√∫de mental'
            }
        },
        # QUEST√ÉO 6
        'Voc√™ acha que discutir um dist√∫rbio de sa√∫de mental com empregadores anteriores teria consequ√™ncias negativas?': {
            'pergunta': 'Em rela√ß√£o a todos os seus empregadores at√© o momento, quantos deles voc√™ acha que ao discutir sobre um dist√∫rbio de sa√∫de mental poderia trazer consequ√™ncias negativas?',
            'alternativas': {
                'Sim, todos eles': 'Todos eles'
            }
        },
        # QUEST√ÉO 7
        'Voc√™ conhece as op√ß√µes de sa√∫de mental dispon√≠veis sob a cobertura de sa√∫de do seu empregador?': {
            'pergunta': 'Voc√™ sabe quais s√£o as op√ß√µes de tratamento para sa√∫de mental oferecidas pelo plano de sa√∫de do seu empregador?',
            'alternativas': {
                'N√£o sabe': 'Esse tipo de benef√≠cio n√£o √© oferecido pelo meu empregador'
            }
        },
        # QUEST√ÉO 8
        'Voc√™ observou ou experimentou uma resposta sem apoio ou mal tratada a um problema de sa√∫de mental em seu local de trabalho atual ou anterior?': {
            'pergunta': 'Voc√™ j√° percebeu ou viveu uma situa√ß√£o em que problemas de sa√∫de mental foram ignorados ou tratados de forma inadequada no seu trabalho atual ou anterior?'
        },
        # QUEST√ÉO 9
        'Voc√™ ouviu falar ou observou consequ√™ncias negativas para colegas de trabalho com problemas de sa√∫de mental em seus locais de trabalho anteriores?': {
            'pergunta': 'Voc√™ soube de casos ou presenciou consequ√™ncias negativas para colegas de trabalho com problemas de sa√∫de mental em empregos anteriores ou atual?',
            'alternativas': {
                'Alguns deles': 'Somente em alguns empregos',
                'Sim, todos eles': 'Sim, em todos os empregos',
                'Nenhum deles': 'N√£o, em nenhum'
            }
        },
        # QUEST√ÉO 10
        'Suas observa√ß√µes de como outro indiv√≠duo que discutiu um transtorno de sa√∫de mental o tornaram menos propenso a revelar um problema de sa√∫de mental em seu local de trabalho atual?': {
            'pergunta': 'As atitudes de colegas de trabalho que discutiram problemas de sa√∫de mental fizeram com que voc√™ ficasse menos disposto a compartilhar um problema semelhante no seu local de trabalho atual?'
        },
        # QUEST√ÉO 11
        'Voc√™ levantaria um problema de sa√∫de mental com um empregador em potencial em uma entrevista?': {
            'pergunta': 'Voc√™ consideraria abordar um problema de sa√∫de mental durante uma entrevista de emprego?'
        },
        # QUEST√ÉO 12
        'Voc√™ sentiu que seus empregadores anteriores levavam a sa√∫de mental t√£o a s√©rio quanto a sa√∫de f√≠sica?': {
            'pergunta': 'Voc√™ sentiu que os empregadores anteriores/atual tratavam quest√µes de sa√∫de mental com a mesma seriedade que quest√µes de sa√∫de f√≠sica?',
            'alternativas': {
                'Alguns fizeram': 'Alguns somente',
                'Sim, todos eles fizeram': 'Sim, todos eles',
                'Nenhum fez': 'N√£o, nenhum deles' 
            }
        },
        # QUEST√ÉO 13
        'Seus empregadores anteriores forneceram benef√≠cios de sa√∫de mental?': {
            'pergunta': 'Seus empregadores anteriores ofereciam benef√≠cios relacionados √† sa√∫de mental?'
        },
        # QUEST√ÉO 14
        'Voc√™ conhecia as op√ß√µes de cuidados de sa√∫de mental fornecidas por seus empregadores anteriores?': {
            'pergunta': 'Levando em considera√ß√£o os empregos passados que voc√™ j√° teve, voc√™ conhecia as op√ß√µes de cuidados com a sa√∫de mental que seus empregadores ofereciam?',
            'alternativas': {
                'Eu estava ciente de alguns': 'Conhe√ßo somente algumas',
                'Sim, eu estava ciente de todos eles': 'Sim, conhe√ßo a maioria/todas as op√ß√µes',
                'N√£o estou ciente no momento': 'N√£o sei quais s√£o at√© hoje',
            }
        },
        # QUEST√ÉO 15
        'Voc√™ estaria disposto a discutir um problema de sa√∫de mental com seu(s) supervisor(es) direto(s)?': {
            'pergunta': 'Voc√™ se sentiria confort√°vel em falar sobre um problema de sa√∫de mental com seu(s) supervisor(es)?',
            'alternativas': {
                'N√£o sabe': 'N√£o tenho certeza',
                'Alguns dos meus empregadores anteriores': 'Somente com alguns',
                'Sim, em todos os meus empregadores anteriores': 'Sim, com a maioria pelo menos',
                'N√£o, em nenhum dos meus empregadores anteriores': 'N√£o, com nenhum deles'
            }  
        },
        # QUEST√ÉO 16
        'Qu√£o disposto voc√™ estaria a compartilhar com amigos e familiares que tem uma doen√ßa mental?': {
            'pergunta': 'Qu√£o disposto voc√™ se estaria para contar aos seus amigos e familiares sobre um problema de sa√∫de mental?'
        },
        # QUEST√ÉO 17
        'Voc√™ j√° ouviu falar ou observou consequ√™ncias negativas para colegas de trabalho que foram abertos sobre problemas de sa√∫de mental em seu local de trabalho?': {
            'pergunta': 'Voc√™ j√° ouviu falar de colegas de trabalho que enfrentaram consequ√™ncias negativas por serem abertos sobre problemas de sa√∫de mental no local de trabalho?',
            'alternativas': {
                'N√£o sabe': 'Meus colegas de trabalho n√£o possuem problemas de sa√∫de mental'
            }
        },
        # QUEST√ÉO 18
        'Voc√™ acha que os membros da equipe/colegas de trabalho o veriam de forma mais negativa se soubessem que voc√™ sofre de um problema de sa√∫de mental?': {
            'pergunta': 'Voc√™ acredita que seus colegas de trabalho veriam voc√™ de forma mais negativa se soubessem que voc√™ tem um problema de sa√∫de mental?',
            'alternativas': {
                'Talvez': 'Talvez, eu n√£o tenho certeza quem os meus colegas s√£o',
                'Sim, eu acho que eles fariam': 'Sim, eu acredito que eles fariam isso comigo',
                'N√£o, eu n√£o acho que eles fariam': 'N√£o, eu n√£o acho que iriam fazer isso comigo',
                'Sim, eles fazem': 'Sim, eu j√° vi isso acontecer',
                'N√£o, eles n√£o fazem': 'Conhe√ßo os meus colegas o suficiente para saber que isso n√£o ir√° ocorrer'
            }
        },
        # QUEST√ÉO 19
        'Se um problema de sa√∫de mental o levou a solicitar uma licen√ßa m√©dica do trabalho, pedir essa licen√ßa seria:': {
            'pergunta': 'Se voc√™ precisasse pedir uma licen√ßa m√©dica devido a um problema de sa√∫de mental, como seria esse processo?',
            'alternativas': {
                'Very easy': 'Muito f√°cil',
                'Somewhat easy': 'Um pouco f√°cil',
                'Neither easy nor difficult': 'Nem f√°cil nem dif√≠cil',
                'Somewhat difficult': 'Um pouco dif√≠cil',
                'Very difficult': 'Muito dif√≠cil'
            }
        }
    }

    def parafrasear_questao(pergunta, alters, dic):
        """
        Substitui strings de acordo com o dicion√°rio inserido, se aplic√°vel.

        Args:
            pergunta (str): pergunta original.
            alters (list): lista de alternativas originais.
            dic (dict): dicion√°rio contendo as parafrases das perguntas e alternativas.

        Returns:
            Uma tupla contendo a pergunta parafraseada (ou original) e as alternativas parafraseadas (ou originais).
        """
        
        if pergunta in dic:
            # Armazenando a pergunta original
            pergunta_original = pergunta
            # Parafraseamento das perguntas 
            pergunta = dic[pergunta_original]['pergunta']
            # Parafraseamento das alternativas 
            if 'alternativas' in dic[pergunta_original]:
                alters = [dic[pergunta_original]['alternativas'].get(alternativa, alternativa)
                        for alternativa in alters]
        return pergunta, alters
        

    # Question√°rio de m√∫ltiplas alternativas usando st.selectbox()
    st.write('### Question√°rio de Sa√∫de Mental')

    # Dicion√°rio para armazenar as respostas do formul√°rio
    dict_respostas_form = {}

    # Loop para exibir as perguntas e alternativas
    for pergunta, alternativas in perguntas_alternativas.items():
        pergunta_parafraseada, alternativas_parafraseadas = parafrasear_questao(pergunta, alternativas, parafrasear_questoes)
        resposta = st.selectbox(pergunta_parafraseada, alternativas_parafraseadas)
        # Revertendo a resposta para o valor original, se aplic√°vel
        if pergunta in parafrasear_questoes and 'alternativas' in parafrasear_questoes[pergunta]:
            alternativa_revertida = {v: k for k, v in parafrasear_questoes[pergunta]['alternativas'].items()}
            resposta = alternativa_revertida.get(resposta, resposta)
        dict_respostas_form[pergunta] = resposta

    # Convertendo o dicion√°rio com as respostas em um DataFrame
    df_form_respondido = pd.DataFrame([dict_respostas_form])

    # Definindo valores num√©ricos para respostas comuns no formul√°rio
    dict_substituir_valores = {
            # Neutro
            'N√£o aplic√°vel': 0, 'N√£o sabe': 0,
            # Negativo
            'N√£o': -1, 'N√£o, nenhum forneceu': -1, 'Nenhum fez': -1, 'Nenhum deles': -1, 'N√£o, em nenhum dos meus empregadores anteriores': -1,
            # Meio-termo
            'Talvez': 1, 'Alguns forneceram': 1, 'Alguns fizeram': 1, '√Äs vezes': 1, 'Alguns deles': 1, 'Alguns dos meus empregadores anteriores': 1,
            # Positivo
            'Sim': 2, 'Sim, todos eles forneceram': 2, 'Sim, todos eles fizeram': 2, 'Sim, sempre': 2, 'Sim, todos eles': 2,
            'Sim, em todos os meus empregadores anteriores': 2
    }

    # Em colunas bin√°rias, substuitui o valor 0 para -1, para ficar igual ao que foi estabalecido no dicion√°rio "dic_substituir_linhas"
    df_form_respondido = df_form_respondido.replace(0, -1)

    # Mapeando as colunas com dados categ√≥ricos ordinais
    dict_ordinais_mapping = {
        'Se um problema de sa√∫de mental o levou a solicitar uma licen√ßa m√©dica do trabalho, pedir essa licen√ßa seria:': {
            'N√£o sabe': 0,
            'Very easy': 1,
            'Somewhat easy': 2,
            'Neither easy nor difficult': 3,
            'Somewhat difficult': 4,
            'Very difficult': 5,
        },
        'Voc√™ conhecia as op√ß√µes de cuidados de sa√∫de mental fornecidas por seus empregadores anteriores?': {
            'N√£o estou ciente no momento': -2,
            'N√£o, s√≥ tomei conhecimento mais tarde': -1,
            'Eu estava ciente de alguns': 1,
            'Sim, eu estava ciente de todos eles': 2
        },
        'Voc√™ acha que os membros da equipe/colegas de trabalho o veriam de forma mais negativa se soubessem que voc√™ sofre de um problema de sa√∫de mental?': {
            'N√£o, eles n√£o fazem': -2,
            'N√£o, eu n√£o acho que eles fariam': -1,
            'Talvez': 1,
            'Sim, eu acho que eles fariam': 2,
            'Sim, eles fazem': 3
        },
        'Qu√£o disposto voc√™ estaria a compartilhar com amigos e familiares que tem uma doen√ßa mental?': {
            'N√£o se aplica a mim (n√£o tenho doen√ßa mental)': 0,
            'N√£o aberto': -2,
            'Um pouco n√£o aberto': -1,
            'Neutro': 1,
            'Um pouco aberto': 2,
            'Muito aberto': 3
        },
        'Voc√™ observou ou experimentou uma resposta sem apoio ou mal tratada a um problema de sa√∫de mental em seu local de trabalho atual ou anterior?': {
            'N√£o': -1,
            'Talvez/Sem certeza': 1,
            'Sim, eu observei': 2,
            'Sim, eu experimentei': 3
        },
        'Se voc√™ tem um problema de sa√∫de mental, sente que isso interfere no seu trabalho ao ser tratado de forma eficaz?': {
            'N√£o se aplica a mim': 0,
            'Nunca': -2,
            'Raramente': -1,
            '√Äs vezes': 1,
            'Frequentemente': 2
        },
    }

    # Substituindo as respostas por valores num√©ricos 
    df_form_respondido.replace(dict_substituir_valores, inplace=True)
    for coluna, mapeamento in dict_ordinais_mapping.items():
        if coluna in df_form_respondido.columns:
            df_form_respondido[coluna] = df_form_respondido[coluna].replace(mapeamento)

    # Convertendo todas as colunas para tipo num√©rico
    df_form_respondido = df_form_respondido.apply(pd.to_numeric, errors='coerce')

    # Exibindo o DataFrame do formul√°rio respondido
    st.write('### Resultados do Question√°rio')
    st.dataframe(df_form_respondido)

    # Caminho do diret√≥rio onde o modelo de floresta aleat√≥ria para classifica√ß√£o est√° salvo
    caminho = 'https://github.com/LOUMERIM/Dashboard-DSS/raw/refs/heads/main/modeloRF_treinado.pkl'

    # Fazer o download do arquivo usando requests
    response = requests.get(caminho)
    response.raise_for_status()  # Levanta um erro se o download falhar

    # Carregar o modelo j√° treinado a partir do conte√∫do baixado
    modelo_carregado = pickle.load(io.BytesIO(response.content))

    # Realizando a previs√£o 
    previsao = modelo_carregado.predict(df_form_respondido)

    # Substituindo a sa√≠da de previs√£o do modelo por strings
    resultado_previsao = ['N√£o possui dist√∫rbio mental' if p == -1 else 'Possui dist√∫rbio mental' for p in previsao]

    st.write('### Previs√£o do Modelo')
    st.write(resultado_previsao[0])